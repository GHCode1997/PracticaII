/*
 * generated by Xtext 2.24.0-SNAPSHOT
 */
package cl.ufro.dsl.validation;


import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.validation.CheckType;

import com.google.common.base.Objects;

import cl.ufro.dsl.modeldata.Entity;
import cl.ufro.dsl.modeldata.Feature;
import cl.ufro.dsl.modeldata.ModeldataPackage;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class ModeldataValidator extends AbstractModeldataValidator {
	
	public static final String INVALID_NAME = "invalidName";

	@Check
	public void checkGreetingStartsWithCapital(Entity entity) {
		if (!Character.isUpperCase(entity.getName().charAt(0))) {
			warning("Name should start with a capital",
					ModeldataPackage.Literals.TYPE__NAME,
					INVALID_NAME);
		}
	}
	
    @Check(CheckType.NORMAL)
    public void checkFeatureNameIsUnique(Feature feature) {
        Entity superEntity = ((Entity) feature.eContainer()).getSuperType();
        while (superEntity != null) {
            for (Feature other : superEntity.getFeatures()) {
                if (Objects.equal(feature.getName(), other.getName())) {
                    error("Feature names have to be unique", ModeldataPackage.Literals.FEATURE__NAME);
                    return;
                }
            }
            superEntity = superEntity.getSuperType();
        }
    }
	
}
